# IDENTIFY AND PREVENT BROKEN ACCESS CONTROL
--------------------------------------------

* Broken Access Controls
------------------------
In our modern era, applications are becoming increasingly more robust, dynamic, and complex. Given the increased complexity, it is only natural that vulnerabilities will find their way 
into our applications. However, as developers, we must ensure we are vigilant against any issues.

One common addition found within most modern applications is the ability to provide users with access to persistent information directly related to their activity. In many applications, 
developers will implement accounts to provide a manner for users to control and maintain data on the application. Of course, while this may sound simple, adding accounts and private 
information introduces various challenges and vulnerabilities to the application.

This short lesson will explore a small application demonstrating a basic example of broken access controls. In this lesson, we’ll be able to learn the following:

	. Review our code for potential access control vulnerabilities.
	. Validate the existence of these vulnerabilities via active exploitation.
	. Remediate our code and remove the vulnerability.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Understanding Our Application
-------------------------------
Before we can identify any vulnerabilities within our code, we need to obtain a proper understanding of the code. Let’s discuss the intended flow of the code, starting with the login 
function.

* Instructions
--------------
When a user submits their credentials, the login() function, defined on line 60, will execute. This function takes a username and password, hashes the password, and compares those to the 
creds dictionary, defined on line 10. As mentioned, this is a simple application. Thus the data storage method in use is relatively basic. In a larger application, this dictionary would 
likely be replaced by a database of some sort.

Assuming the credentials provided match the stored records, the application will return a session cookie, which is used by the application to determine if a user is logged in and who that 
user is logged in as.

Once the cookie is created, the user is redirected to the /account_secret_phrase endpoint.

This endpoint, much like the /account_password endpoint, is designed to be restricted to the user related to their ID. In this case, user1 should have access to all attributes associated 
with id = 1, and admin should have access to all attributes associated with id = 2. Neither user should be able to access the other’s data.

To ensure that these controls are enforced, we have the validate_request() function on line 13. This function will take the id parameter and the session cookie and check to see if the 
provided cookie aligns with the requested id. If the request is valid, the code returns the string “Valid”. However, if the requested combination is invalid, the code returns the string 
“Not Valid”. The account_secret_phrase() and the account_password() codes leverage this function.

This application is relatively simple. Two of these provided endpoints are designed to be protected; one is designed to be publicly accessible. The following table helps map out these 
attributes in a summarized manner.

	Endpoint		Purpose							Access Type			Expected Parameter
	--------		-------							-----------			------------------
	account_user		Display a Username Based on the Provided ID		Unauthenticated/Public		id

	. | - | - | - acount_secret_phrase| Display a User’s Secret Phrase| Authenticated/Private (Accessible only to user)| id


	. | - | - | - account_password| Display a Password Hash| Authenticated/Private (Accessible only to user)|id

Take some time to explore the code and the application.

Next, we’ll look at how this code is vulnerable and exploit the vulnerability!

app.py
------
from flask import Flask
from flask import request
from flask import make_response
import subprocess

import hashlib

app = Flask(__name__)

# user1 password is password1
creds = {'1':['user1','7c6a180b36896a0a8c02787eeafb0e4c','My S3cret Phrase'], '2':['admin','ad58e137c3c6180ffae010bd11bb2f6b','P3rson@l Phrase']}

def validate_request(session,requested_asset):
    if session == creds[requested_asset][1]:
        return 'Valid'
    else:
    	return 'Not Valid'


@app.route('/')
def index():
    return '''
        <b>WELCOME TO THE IDOR ACCOUNT SYSTEM</b>
	<form action="/login" method="GET">
	  <label for="Username">Username:</label><br>
	  <input type="text" id="username" name="username" value="username"><br>
	  <label for="Password">Password:</label><br>
	  <input type="text" id="password" name="password" value="password"><br><br>
	  <input type="submit" value="Submit">
	</form> 
	'''
	
#Protected
@app.route('/account_secret_phrase', methods=['GET'])
def account_secret_phrase():
    id_val = request.args.get('id')
    session = request.args.get('session')
    if validate_request(session,id_val) == 'Valid':
    	return "Welcome " + creds[id_val][0] + "!\nYour secret phrase is " + creds[id_val][2]
    else:
    	return "Access Denied"

#Protected
@app.route('/account_password', methods=['GET'])
def account_page_password():
    id_val = request.args.get('id')
    session = request.args.get('session')
    if validate_request(session,id_val):
    	return "Welcome " + creds[id_val][0] + "!\nYour password hash is " + creds[id_val][1]
    else:
    	return "Access Denied"

#Public
@app.route('/account_user', methods=['GET'])
def account_page_username():
    id_val = request.args.get('id')
    return "Welcome " + creds[id_val][0] + "!\The username is " + creds[id_val][0]

@app.route('/login', methods=['GET'])
def login():
    user = request.args.get('username')
    password = request.args.get('password')
    password = hashlib.md5(password.encode())
    password = password.hexdigest()
    print(user + " " + password)
    for cred in creds:
        user_stored = creds[cred][0]
        print(user_stored)
        password_stored = creds[cred][1]
        print(password_stored)
        if user_stored == user:
            if password_stored == password:
                resp = make_response()
                resp.set_cookie("session",password)
                return "Access Granted. If you aren't automatically redirected, <a href=/account_secret_phrase?id=" + cred + "&session=" +password+">click here!</a>"
            else:
                return "Login Failed"
        else:
            return "Login Failed"
    return "Login Failed"


app.run(host='0.0.0.0', port=8181)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Exploiting An Insecure Direct Object Reference Vulnerability
--------------------------------------------------------------
Now that we understand how the code is supposed to work let’s take a look at what’s actually happening.

Let’s log in and validate that the protected endpoints are protected.

Let’s leverage the user1 account.

* Instructions
--------------
Log in with the username,user1, and the password, password1.

Once logged in, you’ll be informed that you’ve been granted access to the user account. Next, the page should redirect you to a new page with the following message: “Welcome user1! Your 
secret phrase is My S3cret Phrase”.

The end result of logging in should be the following URL:

https://localhost/account_secret_phrase?id=1&session=7c6a180b36896a0a8c02787eeafb0e4c

Let’s see what happens if we change the URL’s id value from 1 to 2.

What is returned?

Access Denied. This means that the application is correctly leveraging the validate_request function in the Python code.

Hm, since we’re authenticated as “user1”, let us change our current endpoint in the URL, account_secret_phrase, to the endpoint /account_password?id=1. The new URL should be the following:

https://localhost/account_password?id=1&session=7c6a180b36896a0a8c02787eeafb0e4c

When we do this, we should see the following string: “Welcome user1! Your password hash is 7c6a180b36896a0a8c02787eeafb0e4c”

Let’s try the same thing before and change the URL’sid to 2.

Uh oh! We didn’t receive the “Access Denied” message this time. Rather, we can see the other user’s password hash!

This is an example of an Insecure Direct Object Reference, known as IDOR for short. IDOR vulnerabilities are an incredibly common example of broken access controls. Due to a lack of 
proper validation, this class of vulnerability allows attackers to access potentially sensitive data directly. Depending on the application, this type of vulnerability can take many forms. An 
attacker can access sensitive data via a basic number, as we have here, a file name, a GUID value, or some other unique identifier. While some identifiers, such as a GUID, are random 
enough to be difficult to guess and, therefore, access, some, like basic numbers and filenames, may be easily guessable and accessible.

Now that we understand where the vulnerability exists, let’s fix our code in the next exercise.

app.py
------
from flask import Flask
from flask import request
from flask import make_response
import subprocess

import hashlib

app = Flask(__name__)

# user1 password is password1
creds = {'1':['user1','7c6a180b36896a0a8c02787eeafb0e4c','My S3cret Phrase'], '2':['admin','ad58e137c3c6180ffae010bd11bb2f6b','P3rson@l Phrase']}

def validate_request(session,requested_asset):
    if session == creds[requested_asset][1]:
        return 'Valid'
    else:
    	return 'Not Valid'


@app.route('/')
def index():
    return '''
        <b>WELCOME TO THE IDOR ACCOUNT SYSTEM</b>
	<form action="/login" method="GET">
	  <label for="Username">Username:</label><br>
	  <input type="text" id="username" name="username" value="username"><br>
	  <label for="Password">Password:</label><br>
	  <input type="text" id="password" name="password" value="password"><br><br>
	  <input type="submit" value="Submit">
	</form> 
	'''
	
#Protected
@app.route('/account_secret_phrase', methods=['GET'])
def account_secret_phrase():
    id_val = request.args.get('id')
    session = request.args.get('session')
    if validate_request(session,id_val) == 'Valid':
    	return "Welcome " + creds[id_val][0] + "!\nYour secret phrase is " + creds[id_val][2]
    else:
    	return "Access Denied"

#Protected
@app.route('/account_password', methods=['GET'])
def account_page_password():
    id_val = request.args.get('id')
    session = request.args.get('session')
    if validate_request(session,id_val):
    	return "Welcome " + creds[id_val][0] + "!\nYour password hash is " + creds[id_val][1]
    else:
    	return "Access Denied"

#Public
@app.route('/account_user', methods=['GET'])
def account_page_username():
    id_val = request.args.get('id')
    return "Welcome " + creds[id_val][0] + "!\The username is " + creds[id_val][0]

@app.route('/login', methods=['GET'])
def login():
    user = request.args.get('username')
    password = request.args.get('password')
    password = hashlib.md5(password.encode())
    password = password.hexdigest()
    print(user + " " + password)
    for cred in creds:
        user_stored = creds[cred][0]
        print(user_stored)
        password_stored = creds[cred][1]
        print(password_stored)
        if user_stored == user:
            if password_stored == password:
                resp = make_response()
                resp.set_cookie("session",password)
                return "Access Granted. If you aren't automatically redirected, <a href=/account_secret_phrase?id=" + cred + "&session=" +password+">click here!</a>"
            else:
                return "Login Failed"
        else:
            return "Login Failed"
    return "Login Failed"


app.run(host='0.0.0.0', port=8181)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Remediating Broken Access Controls
------------------------------------
Our last exercise found that the validation code surrounding the account_password feature was not properly securing individual accounts. To understand why let’s dive into the 
validate_request and account_page_password methods. Additionally, we’ll look at the account_secret_phrase method, as we know this function is properly restricting user’s access. Once we 
understand why the code is broken, the fix can be implemented easily.

* Instructions
--------------
Looking at the validate_request() function, we see that the code will return a string value of either “Valid” or “Invalid”. Since we know that the account_secret_phrase() function is 
working, let’s see how this method implements the validation feature. A quick review of the code shows that line 38 begins a basic IF statement. This IF statement calls the 
validate_request() method and compares the returned value to the string “Valid”. If the returned value is “Valid”, the application will return the value of the secret phrase request.

Looking at the account_password() function, we can also see a similar IF statement starting at line 48. However, there is a key difference between how account_secret_phrase() and 
account_password() implement this IF statement. Unlike line 38, which compares the return value of “validate_request” to the known “Valid” string, line 48 does not.

This lack of a basic comparison is the culprit of our vulnerability!

An interesting fact will stand out if we look at how Python processes strings. Given a valid string in a boolean operation, the Python interpreter will treat a non-empty string as True!

To fix our code, we needed to implement the string comparison, as seen in account_secret_phrase().

Add == "Valid" to the IF statement on line 48. The completed IF statement should be:

    if validate_request(session,id_val) == "Valid":
        return "Welcome " + creds[id_val][0] + "!\nYour password hash is " + creds[id_val][1]
    else:
        return "Access Denied"

This will fix the access control vulnerability, however, please don’t take our word for it. Test it yourself!

While this is a minor mistake, we can see how damaging the impacts are. Even with a relatively simple application, we see how easy it is to create unintended vulnerabilities in our code. 
This further highlights the importance of creating code securely. Writing code shouldn’t be a one-step process. Rather, secure coding consists of many steps, including internal source 
code reviews, internal penetration tests, and even external validation processes such as third-party penetration tests.

app.py
------
from flask import Flask
from flask import request
from flask import make_response
import subprocess

import hashlib

app = Flask(__name__)

# user1 password is password1
creds = {'1':['user1','7c6a180b36896a0a8c02787eeafb0e4c','My S3cret Phrase'], '2':['admin','ad58e137c3c6180ffae010bd11bb2f6b','P3rson@l Phrase']}

def validate_request(session,requested_asset):
    if session == creds[requested_asset][1]:
        return 'Valid'
    else:
    	return 'Not Valid'


@app.route('/')
def index():
    return '''
        <b>WELCOME TO THE IDOR ACCOUNT SYSTEM</b>
	<form action="/login" method="GET">
	  <label for="Username">Username:</label><br>
	  <input type="text" id="username" name="username" value="username"><br>
	  <label for="Password">Password:</label><br>
	  <input type="text" id="password" name="password" value="password"><br><br>
	  <input type="submit" value="Submit">
	</form> 
	'''
	
#Protected
@app.route('/account_secret_phrase', methods=['GET'])
def account_secret_phrase():
    id_val = request.args.get('id')
    session = request.args.get('session')
    if validate_request(session,id_val) == 'Valid':
    	return "Welcome " + creds[id_val][0] + "!\nYour secret phrase is " + creds[id_val][2]
    else:
    	return "Access Denied"

#Protected
@app.route('/account_password', methods=['GET'])
def account_page_password():
    id_val = request.args.get('id')
    session = request.args.get('session')
    if validate_request(session,id_val) == 'Valid':
    	return "Welcome " + creds[id_val][0] + "!\nYour password hash is " + creds[id_val][1]
    else:
    	return "Access Denied"

#Public
@app.route('/account_user', methods=['GET'])
def account_page_username():
    id_val = request.args.get('id')
    return "Welcome " + creds[id_val][0] + "!\The username is " + creds[id_val][0]

@app.route('/login', methods=['GET'])
def login():
    user = request.args.get('username')
    password = request.args.get('password')
    password = hashlib.md5(password.encode())
    password = password.hexdigest()
    print(user + " " + password)
    for cred in creds:
        user_stored = creds[cred][0]
        print(user_stored)
        password_stored = creds[cred][1]
        print(password_stored)
        if user_stored == user:
            if password_stored == password:
                resp = make_response()
                resp.set_cookie("session",password)
                return "Access Granted. If you aren't automatically redirected, <a href=/account_secret_phrase?id=" + cred + "&session=" +password+">click here!</a>"
            else:
                return "Login Failed"
        else:
            return "Login Failed"
    return "Login Failed"


app.run(host='0.0.0.0', port=8181)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Conclusion
------------
As mentioned, applications are becoming increasingly more robust, dynamic, and complex in our modern era. Given the increased complexity, it is only natural that vulnerabilities will find 
their way into our applications. However, as developers, we must ensure we are vigilant against any issues.

This short lesson explored a small application demonstrating a basic example of broken access controls. We’ve done the following:

	. Reviewed our code for potential access control vulnerabilities.
	. Validated the existence of these vulnerabilities via active exploitation.
	. Remediated our code and removed the vulnerability.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

